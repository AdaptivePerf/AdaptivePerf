#!/bin/env python3
import sys
import re
import math
from joblib import Parallel, delayed

if __name__ == '__main__':
    to_replace = []
    with open(sys.argv[1], mode='r') as f:
        for line in f:
            match = re.search(r'^(.+?)\s+([\d\.]+)$', line.strip())
            if match is None:
                raise RuntimeError(line)

            first_part, last_part = match.group(1), match.group(2)
            to_replace.append(first_part.split(';') + [last_part])

    graph_type = sys.argv[2]

    addr_dict = {}
    for line in sys.stdin:
        line = line.strip()
        match = re.search(r'(\S+) (.+)', line)

        addr, symbol = match.group(1), match.group(2)
        
        if symbol != '[unknown]':
            addr_dict['(' + addr + ')'] = symbol

    def do(a, b):
        global to_replace
        global addr_dict

        res = []
        for i in range(a, min(a + b, len(to_replace))):
            l = to_replace[i]
            new_elems = [l[0]]

            for i in range(1, len(l) - 1):
                match = re.search(r'^\((0x[0-9a-f]+) (.+)\)$', l[i])
                string = None
                
                if match is not None:
                    string = addr_dict.get('(' + match.group(1) + ')',
                                           match.group(2))
                else:
                    string = addr_dict.get(l[i], l[i])

                if graph_type == 'cold' and i == len(l) - 2:
                    string = '[cold]_' + string
                    
                new_elems.append(string)

            new_elems.append(l[-1])
            res.append(new_elems)

        return res

    jobs = int(sys.argv[3])
    jump = math.ceil(len(to_replace) / jobs)
    replaced = Parallel(n_jobs=jobs, verbose=20)(delayed(do)(a, jump)
                                                 for a in range(0, len(to_replace), jump))

    for g in replaced:
        for l in g:
            print(';'.join(l[:-1]) + ' ' + l[-1])
