# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-script-python Documentation for the list of available functions.

from __future__ import print_function
import os
import sys
import re
import json
import subprocess
from pathlib import Path

sys.path.append(os.environ['PERF_EXEC_PATH'] +
                '/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

tid_dict = {}
cpp_filt = None


def common_callback(stack, ret_value):
    if int(ret_value) == 0:
        return
    
    def demangle(name):
        stdin = cpp_filt.stdin
        stdin.write((name + '\n').encode())
        stdin.flush()

        stdout = cpp_filt.stdout
        return stdout.readline().decode().strip()
    
    tid_dict[ret_value] = list(map(
        lambda x: demangle(x['sym']['name']) if 'sym' in x else
        '[' + Path(x['dso']).name + ']' if 'dso' in x else
        f'({x["ip"]:#x})', stack))


def trace_begin():
    global cpp_filt

    cpp_filt = subprocess.Popen(['c++filt', '-p'],
                                stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE)
    
def trace_end():
    cpp_filt.terminate()
    print(json.dumps(tid_dict))


def syscalls__sys_exit_clone3(event_name, context, common_cpu, common_secs,
                              common_nsecs, common_pid, common_comm,
                              common_callchain, __syscall_nr, ret,
                              perf_sample_dict):
    common_callback(perf_sample_dict['callchain'], ret)


def syscalls__sys_exit_clone(event_name, context, common_cpu, common_secs,
                             common_nsecs, common_pid, common_comm,
                             common_callchain, __syscall_nr, ret,
                             perf_sample_dict):
    common_callback(perf_sample_dict['callchain'], ret)


def syscalls__sys_exit_vfork(event_name, context, common_cpu, common_secs,
                             common_nsecs, common_pid, common_comm,
                             common_callchain, __syscall_nr, ret,
                             perf_sample_dict):
    common_callback(perf_sample_dict['callchain'], ret)


def syscalls__sys_exit_fork(event_name, context, common_cpu, common_secs,
                            common_nsecs, common_pid, common_comm,
                            common_callchain, __syscall_nr, ret,
                            perf_sample_dict):
    common_callback(perf_sample_dict['callchain'], ret)
